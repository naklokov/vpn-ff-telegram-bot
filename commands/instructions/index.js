const {
  IOS_INSTRUCTIONS_LINK,
  ANDROID_INSTRUCTIONS_LINK,
  CMD,
} = require('../../constants');
const { usersConnector } = require('../../db');
const { getUserPersonalDataFromContext } = require('../../utils/common');

module.exports = async (ctx) => {
  const { id: chatId } = getUserPersonalDataFromContext(ctx);
  const user = await usersConnector.getUserByChatId(chatId);

  if (!user?.chatId) {
    ctx.reply(
      `–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üëâ /${CMD.registration}`
    );
    return;
  }

  var options = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: 'IOS (Apple)', url: IOS_INSTRUCTIONS_LINK }],
        [{ text: 'Android', url: ANDROID_INSTRUCTIONS_LINK }],
      ],
    }),
  };
  await ctx.reply(
    `–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–∏–∂–µ –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –∫–ª–∏–∫—É

–ª–æ–≥–∏–Ω: \`${user?.phone}\`
–ø–∞—Ä–æ–ª—å: \`${user?.password}\``,
    { parse_mode: 'MarkdownV2' }
  );
  await ctx.reply('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN', options);
};
