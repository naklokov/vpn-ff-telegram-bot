const { CMD, CALLBACK_QUERY_DATA } = require("../../../constants");
const { usersConnector } = require("../../../db");
const { getUserPersonalDataFromContext } = require("../../../utils/common");

module.exports = async (ctx) => {
  const { id: chatId } = getUserPersonalDataFromContext(ctx);
  const user = await usersConnector.getUserByChatId(chatId);

  if (!user?.chatId) {
    await ctx.reply(
      `–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üëâ /${CMD.registration}`,
    );
    return;
  }

  await ctx.replyWithMarkdown(`
      *–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞* (_–∫–æ–ø–∏—Ä—É—é—Ç—Å—è –ø–æ –∫–ª–∏–∫—É_)
- –í–∞—à –ª–æ–≥–∏–Ω: \`${user.phone}\`
- –í–∞—à –ø–∞—Ä–æ–ª—å: \`${user.password}\`
`);

  var ipsecOptions = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          {
            text: "iOS",
            callback_data: CALLBACK_QUERY_DATA.instructionsIosIpsec,
          },
        ],
        [
          {
            text: "Android",
            callback_data: CALLBACK_QUERY_DATA.instructionsAndroidIpsec,
          },
        ],
      ],
    }),
  };

  await ctx.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN", ipsecOptions);
};
