const { Scenes, Markup } = require("telegraf");
const { SCENE_IDS, CMD_TEXT, MONTH_COST, CMD } = require("../../constants");
const { exitButton } = require("../../components/buttons");
const { usersConnector } = require("../../db");
const { getUserPersonalDataFromContext } = require("../../utils/common");
const { sendAdminPaymentInfo } = require("./utils");
const { extendUser } = require("../extend/utils");
const { exitCommand } = require("../../components/exit");
const { checkPayment } = require("../../utils/recognize");
const logger = require("../../utils/logger");

const payScene = new Scenes.WizardScene(
  SCENE_IDS.PAY,
  async (ctx) => {
    const { id: chatId } = getUserPersonalDataFromContext(ctx);
    const dbUser = await usersConnector.getUserByChatId(chatId);

    if (!dbUser) {
      ctx.reply(
        `–í—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üëâ /${CMD.registration}`,
      );
      await exitCommand(ctx);
      ctx.scene.leave();
      return;
    }

    await ctx.reply(
      `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN - ${MONTH_COST} —Ä—É–± / –º–µ—Å—è—Ü

–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–∞ –ª–æ–≥–∏–Ω ${dbUser.phone}

–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å`,
      {
        ...exitButton,
      },
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    const payedMonthsCount = parseInt(ctx.message.text, 10);
    if (isNaN(payedMonthsCount)) {
      ctx.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", { ...exitButton });
      return;
    }

    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ctx.wizard.state.extend = {};
    ctx.wizard.state.extend.months = payedMonthsCount;

    const amount = payedMonthsCount * MONTH_COST;
    ctx.wizard.state.extend.amount = amount;
    ctx.wizard.state.extend.tryCount = 0;

    await ctx.reply(
      `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ ${amount} —Ä—É–±

üì≤ –û–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ +79106174473
–Ø–Ω–¥–µ–∫—Å –ø–µ–π, –¢–∏–Ω—å–∫–æ—Ñ—Ñ, –ê–ª—å—Ñ–∞, –°–±–µ—Ä

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏—Ç–µ –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –æ–ø–ª–∞—Ç–æ–π`,
      {
        ...exitButton,
      },
    );
    return ctx.wizard.next();
  },
  async (ctx) => {
    if (!ctx.wizard.state?.extend) {
      ctx.scene.leave();
      return;
    }

    const { id: chatId } = getUserPersonalDataFromContext(ctx);
    const dbUser = await usersConnector.getUserByChatId(chatId);

    ctx.wizard.state.extend.login = dbUser.phone;

    const amount = ctx.wizard.state?.extend?.amount ?? 0;
    const isPayCorrect = await checkPayment(amount, ctx);

    logger.info("–†–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ", dbUser.chatId);

    if (!isPayCorrect) {
      if (ctx.wizard.state.extend.tryCount > 0) {
        await ctx.reply("–û–ø–ª–∞—Ç–∞ –ø—Ä–∏–Ω—è—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
        await sendAdminPaymentInfo(isPayCorrect, ctx);
        await exitCommand(ctx);
        ctx.scene.leave();
        return;
      }

      await ctx.reply("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ", {
        ...exitButton,
      });

      ctx.wizard.state.extend.tryCount = ctx.wizard.state.extend.tryCount + 1;

      logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ user:" + chatId);

      return;
    }

    try {
      await extendUser(dbUser.phone, ctx.wizard.state.extend.months, ctx);

      // –≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
      await sendAdminPaymentInfo(isPayCorrect, ctx);
    } catch (error) {
      ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞");
      logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–∞", error);
      throw Error(error);
    } finally {
      await exitCommand(ctx);
      ctx.scene.leave();
    }
  },
);

payScene.hears(CMD_TEXT.exit, async (ctx) => {
  ctx.reply("–í—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ", Markup.removeKeyboard(true));
  ctx.scene.leave();
});

module.exports = { payScene };
